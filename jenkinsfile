//...........................DEVSECOPS PIPELINES...................
// Security Tools Integrated:
// 1. SonarQube (SAST)
// 2. OWASP Dependency-Check (SCA)
// 3. Trivy (Container Scanning)
// 4. OWASP ZAP (DAST)

pipeline {
  agent any

  parameters {
    booleanParam(name: 'RUN_DEP_CHECK', defaultValue: false, description: 'Run OWASP Dependency-Check stage')
  }

  environment {
    NODE_ENV = 'development'
    API_URL = 'http://localhost:3000'
    DOCKER_CREDENTIALS = credentials('dockerhub')
    DOCKER_IMAGE = 'nodeimagejenkins'
    SONARQUBE_TOKEN = credentials('sonarqube-token')
  }

  stages {
    stage('Checkout Code') {
      steps {
        git url: 'https://github.com/elonerajeev/DevSecOps-Pipeline-For-Node-App.git',
            branch: 'main'
      }
    }

    stage('Install Dependencies') {
      steps {
        sh 'npm install'
      }
    }

    stage('Run Tests') {
      steps {
        sh 'npm test'
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withSonarQubeEnv('local-sonarqube') {
          script {
            def scannerHome = tool 'sonar-scanner'
            sh """
              ${scannerHome}/bin/sonar-scanner \
              -Dsonar.projectKey=node-app \
              -Dsonar.sources=. \
              -Dsonar.host.url=http://localhost:9000 \
              -Dsonar.login=${env.SONARQUBE_TOKEN}
            """
          }
        }
      }
    }

    stage('OWASP Dependency-Check') {
      when {
        expression { return params.RUN_DEP_CHECK }
      }
      steps {
        script {
          echo "Running OWASP Dependency-Check..."
          sh """
            docker run --rm \
              -v \$(pwd):/src \
              owasp/dependency-check \
              --scan /src \
              --format HTML \
              --out /src/dependency-check-report
          """
        }
        publishHTML([
          reportDir: 'dependency-check-report',
          reportFiles: 'dependency-check-report.html',
          reportName: 'Dependency-Check Report'
        ])
      }
    }

    stage('Build Docker Image') {
      steps {
        sh "docker build -t ${DOCKER_IMAGE}:latest ."
      }
    }

    stage('Trivy Scan') {
      steps {
        script {
          echo "Running Trivy scan..."
          sh """
            trivy image --exit-code 1 --severity CRITICAL,HIGH ${DOCKER_IMAGE}:latest
          """
        }
      }
    }


    stage('Push Docker Image') {
  steps {
    script {
      withCredentials([usernamePassword(
        credentialsId: 'dockerhub',
        usernameVariable: 'DOCKER_USERNAME',
        passwordVariable: 'DOCKER_PASSWORD'
      )]) {
        // 1. Login with proper error handling
        sh '''
          set +x
          attempts=0
          max_attempts=3
          login_success=false

          while [ $attempts -lt $max_attempts ]; do
            if echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin; then
              echo "Login successful"
              login_success=true
              break
            else
              attempts=$((attempts+1))
              echo "Attempt $attempts failed, retrying in 15 seconds..."
              sleep 15
            fi
          done

          if [ "$login_success" = false ]; then
            echo "ERROR: Docker login failed after $max_attempts attempts"
            exit 1
          fi
        '''

        // 2. Tag and push with error handling
        sh """
          docker tag ${DOCKER_IMAGE}:latest docker.io/${DOCKER_USERNAME}/${DOCKER_IMAGE}:latest || {
            echo "ERROR: Docker tag failed"
            exit 1
          }

          docker push docker.io/${DOCKER_USERNAME}/${DOCKER_IMAGE}:latest || {
            echo "ERROR: Docker push failed"
            exit 1
          }

          echo "Docker push completed successfully"
        """
      }
    }
  }
}

    stage('Deploy') {
      steps {
        script {
          withCredentials([usernamePassword(
            credentialsId: 'dockerhub',
            usernameVariable: 'DOCKER_USERNAME',
            passwordVariable: 'DOCKER_PASSWORD'
          )]) {
            sh """
              docker stop ${DOCKER_IMAGE} || true
              docker rm ${DOCKER_IMAGE} || true
              docker run -d -p 3000:3000 --name ${DOCKER_IMAGE} $DOCKER_USERNAME/${DOCKER_IMAGE}:latest
            """
          }
        }
      }
    }


    stage('DAST Scan (OWASP ZAP)') {
    steps {
        script {
            sh '''
                mkdir -p zap-report zap-wrk
                docker run --rm \
                  -v $(pwd)/zap-report:/zap/report \
                  -v $(pwd)/zap-wrk:/zap/wrk \
                  --add-host=host.docker.internal:host-gateway \
                  ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
                  -t http://host.docker.internal:3000 \
                  -I \
                  -T 5 || true
            '''
            publishHTML([
                reportDir: 'zap-report',
                reportFiles: 'zap-report.html',
                reportName: 'OWASP ZAP Report'
            ])
        }
    }
    post {
        always {
            sh 'rm -rf zap-wrk'
        }
    }
}


    stage('Cleanup Old Docker Images') {
      steps {
        script {
          sh """
            echo "Cleaning up old Docker images..."
            docker image prune -af --filter "until=24h"
            docker container prune -f
          """
        }
      }
    }
  }
}
