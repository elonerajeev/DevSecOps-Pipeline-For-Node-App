name: DevSecOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  devsecops:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: development
      API_URL: http://localhost:3000
      DOCKER_IMAGE: nodeimagejenkins

    steps:
      # ----------------- Checkout -----------------
      - name: Checkout Code
        uses: actions/checkout@v4

      # ----------------- Install Node.js & Dependencies -----------------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test

      # ----------------- SonarQube Analysis -----------------
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          args: >
            -Dsonar.projectKey=node-app
            -Dsonar.sources=.
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

      # ----------------- Build Docker Image -----------------
      - name: Build Docker Image
        run: docker build -t $DOCKER_IMAGE:latest .

      # ----------------- Trivy Scan -----------------
      - name: Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:latest
          severity: CRITICAL,HIGH
          exit-code: 1
          ignore-unfixed: true

      # ----------------- Push Docker Image -----------------
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Push
        run: |
          docker tag $DOCKER_IMAGE:latest docker.io/${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE:latest
          docker push docker.io/${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE:latest

      # ----------------- Deploy -----------------
      - name: Deploy Container
        run: |
          docker stop $DOCKER_IMAGE || true
          docker rm $DOCKER_IMAGE || true
          docker run -d -p 3000:3000 --name $DOCKER_IMAGE ${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE:latest

      # ----------------- OWASP ZAP DAST Scan -----------------
      - name: OWASP ZAP DAST Scan
        run: |
          mkdir -p zap-report zap-wrk
          docker run --rm \
            -v ${{ github.workspace }}/zap-report:/zap/report \
            -v ${{ github.workspace }}/zap-wrk:/zap/wrk \
            --add-host=host.docker.internal:host-gateway \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t http://host.docker.internal:3000 \
            -I \
            -T 5 || true
        continue-on-error: true

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report

      # ----------------- Cleanup -----------------
      - name: Cleanup Docker
        run: |
          docker image prune -af --filter "until=24h"
          docker container prune -f
